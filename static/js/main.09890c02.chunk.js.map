{"version":3,"sources":["app/App.module.scss","components/Card/Card.module.scss","components/Scroll/Scroll.module.scss","components/Header/Header.module.scss","components/Card/Card.tsx","components/CardsList/CardsList.tsx","components/SearchBox/SearchBox.tsx","components/Scroll/Scroll.tsx","redux/types/actionTypes.ts","components/Header/Header.tsx","components/ErrorBoundary/ErrorBoundary.tsx","app/App.tsx","redux/actions/actions.ts","constants.ts","serviceWorker.ts","redux/reducers/reducers.ts","redux/store.ts","index.tsx"],"names":["module","exports","Card","props","id","name","email","className","styles","card","src","alt","CardsList","robots","map","robot","key","SearchBox","setSearch","searchValue","aria-label","type","placeholder","value","onChange","event","target","Scroll","ActionTypes","style","height","scroll","children","Header","title","this","Component","ErrorBoundary","state","hasError","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","text","CHANGE_SEARCH_FIELD","payload","setSearchField","onRequestRobots","REQUEST_ROBOTS_PENDING","fetch","then","response","json","data","REQUEST_ROBOTS_SUCCESS","catch","err","REQUEST_ROBOTS_FAILED","useEffect","filtredRobots","filter","toLowerCase","includes","app","loader","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initialStateSearch","initialStateRequest","rootReducer","combineReducers","action","middlewares","thunk","logger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.09890c02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2uI1G\",\"loader\":\"App_loader__21oJb\",\"spin\":\"App_spin__1rzTB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3RPtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll\":\"Scroll_scroll__1wbG9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3LKC1\"};","import React from 'react';\r\nimport styles from './Card.module.scss';\r\n\r\ninterface CardProps {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n}\r\n\r\nfunction Card(props: CardProps){\r\n    const {id, name, email} = props;\r\n    return (\r\n    <div className={`tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5 ${styles.card}`}>\r\n        <img src={`https://robohash.org/robor${id}?size=200x200`} alt='robot' />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nfunction CardsList(props: any) {\r\n    const {robots} = props;\r\n    return (\r\n        <div className='pa3'>\r\n            {robots.map((robot: any) => (<Card key={robot.id} {...robot}/>))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsList;","import React from 'react';\r\n\r\ninterface SearchBoxProps {\r\n    searchValue: string;\r\n    setSearch(value: string): any; \r\n}\r\n\r\nfunction SearchBox(props: SearchBoxProps) {\r\n    const {setSearch, searchValue} = props;\r\n    return (\r\n        <input\r\n            aria-label = 'search robots'\r\n            className='pa3 ba b--green bg-lightest-blue ma2'\r\n            type='search'\r\n            placeholder='Search for robofriends'\r\n            value={searchValue}\r\n            onChange = {(event)=>setSearch(event.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nimport styles from './Scroll.module.scss';\r\n\r\nfunction Scroll(props: any) {\r\n    return (\r\n        <div style={{ height: '75vh' }} className={styles.scroll}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","export enum ActionTypes {\r\n    CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD',\r\n    REQUEST_ROBOTS_PENDING = 'REQUETS_ROBOTS_PENDIG',\r\n    REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\r\n}","import React, { Component } from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nclass Header extends Component<any, any> {\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n    render() {\r\n        const { title } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h1 className={`f1 ${styles.title}`}>{title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component<{}, any> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Oops, something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport styles from './App.module.scss';\n\nimport CardsList from '../components/CardsList/CardsList';\nimport SearchBox from '../components/SearchBox/SearchBox';\nimport Scroll from '../components/Scroll/Scroll';\nimport Header from '../components/Header/Header';\nimport ErrorBoundary from '../components/ErrorBoundary/ErrorBoundary';\n\nimport { setSearchField, requestRobots } from '../redux/actions/actions';\n\nfunction App(props: any) {\n  const {robots, isPending, searchField, onSearchChange, onRequestRobots} = props;\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filtredRobots = robots.filter((robot: any) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className={styles.app}>\n      <Header title='RoboFriends'/>\n      <SearchBox setSearch={onSearchChange} searchValue={searchField} />\n      <Scroll>\n        <ErrorBoundary>\n          {isPending\n            ? <div className={styles.loader} />\n            : <CardsList robots={filtredRobots} />}\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onSearchChange: (text: string) => dispatch(setSearchField(text)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ActionTypes } from \"../types/actionTypes\";\r\nimport { robotsDataUrl } from \"../../constants\";\r\n\r\nexport const setSearchField = (text: string) => ({\r\n    type: ActionTypes.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch: any) => {\r\n    dispatch({type: ActionTypes.REQUEST_ROBOTS_PENDING})\r\n    fetch(robotsDataUrl)\r\n      .then(response => response.json())\r\n      .then(data => dispatch({type: ActionTypes.REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(err => dispatch({type: ActionTypes.REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","export const robotsDataUrl: string = 'https://jsonplaceholder.typicode.com/users';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionTypes } from \"../types/actionTypes\"\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action: any) => {\r\n    switch(action.type){\r\n        case ActionTypes.CHANGE_SEARCH_FIELD:\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRequest = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest, action: any) => {\r\n    switch(action.type){\r\n        case ActionTypes.REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case ActionTypes.REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            }\r\n        case ActionTypes.REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPending: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { logger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { searchRobots, requestRobots } from './reducers/reducers';\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst middlewares: any[] = [thunk, logger];\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport 'tachyons';\n\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}