{"version":3,"sources":["app/App.module.scss","components/Card/Card.module.scss","components/Scroll/Scroll.module.scss","components/Card/Card.tsx","components/CardsList/CardsList.tsx","components/SearchBox/SearchBox.tsx","components/Scroll/Scroll.tsx","components/ErrorBoundary/ErrorBoundary.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Card","props","id","name","email","className","styles","card","src","alt","CardsList","robots","map","robot","key","SearchBox","setSearch","searchValue","type","placeholder","value","onChange","event","target","Scroll","style","height","scroll","children","ErrorBoundary","state","hasError","this","Component","App","useState","robotsData","setRobotsData","searchField","setSearchField","useEffect","fetch","then","response","json","data","filtredRobots","filter","toLowerCase","includes","app","length","loader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,oB,mBCA7ED,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,mLCqBZC,MAZf,SAAcC,GAAkB,IACrBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACA,yBAAKC,UAAS,8DAAyDC,IAAOC,OAC1E,yBAAKC,IAAG,oCAA+BN,EAA/B,YAA6CO,IAAI,UACzD,6BACI,4BAAKN,GACL,2BAAIC,MCLDM,MATf,SAAmBT,GAAa,IACrBU,EAAUV,EAAVU,OACP,OACI,yBAAKN,UAAU,OACVM,EAAOC,KAAI,SAACC,GAAD,OAAiB,kBAAC,EAAD,eAAMC,IAAKD,EAAMX,IAAQW,SCanDE,MAbf,SAAmBd,GAAwB,IAChCe,EAA0Bf,EAA1Be,UAAWC,EAAehB,EAAfgB,YAClB,OACI,2BACIZ,UAAU,uCACVa,KAAK,SACLC,YAAY,kBACZC,MAAOH,EACPI,SAAY,SAACC,GAAD,OAASN,EAAUM,EAAMC,OAAOH,W,gBCHzCI,MARf,SAAgBvB,GACZ,OACI,yBAAKwB,MAAO,CAAEC,OAAQ,QAAUrB,UAAWC,IAAOqB,QAC7C1B,EAAM2B,W,6BCWJC,E,kDAfX,WAAY5B,GAAY,IAAD,8BACnB,cAAMA,IACD6B,MAAQ,CACTC,UAAU,GAHK,E,qDAQnB,OAAGC,KAAKF,MAAMC,SACH,0DAEJC,KAAK/B,MAAM2B,a,GAZEK,aCgCbC,MAzBf,WAAgB,IAAD,EAC4BC,mBAAS,IADrC,mBACNC,EADM,KACMC,EADN,OAE8BF,mBAAS,IAFvC,mBAENG,EAFM,KAEOC,EAFP,KAGbC,qBAAU,WAERC,MADY,8CAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIR,EAAcQ,QAC7B,IACH,IAAMC,EAAgBV,EAAWW,QAAO,SAAClC,GAAD,OAAgBA,EAAMV,KAAK6C,cAAcC,SAASX,EAAYU,kBACtG,OACE,yBAAK3C,UAAWC,IAAO4C,KACrB,wBAAI7C,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,UAAWuB,EAAgBtB,YAAaqB,IACnD,kBAAC,EAAD,KACE,kBAAC,EAAD,KACIF,EAAWe,OAET,kBAAC,EAAD,CAAWxC,OAAQmC,IADnB,yBAAKzC,UAAWC,IAAO8C,aCdjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8b5d9b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2uI1G\",\"loader\":\"App_loader__21oJb\",\"spin\":\"App_spin__1rzTB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3RPtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll\":\"Scroll_scroll__1wbG9\"};","import React from 'react';\r\nimport styles from './Card.module.scss';\r\n\r\ninterface CardProps {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n}\r\n\r\nfunction Card(props: CardProps){\r\n    const {id, name, email} = props;\r\n    return (\r\n    <div className={`tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5 ${styles.card}`}>\r\n        <img src={`https://robohash.org/robor${id}?100x100`} alt='robot' />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nfunction CardsList(props: any) {\r\n    const {robots} = props;\r\n    return (\r\n        <div className='pa3'>\r\n            {robots.map((robot: any) => (<Card key={robot.id} {...robot}/>))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsList;","import React from 'react';\r\n\r\ninterface SearchBoxProps {\r\n    searchValue: string;\r\n    setSearch(value: string): any; \r\n}\r\n\r\nfunction SearchBox(props: SearchBoxProps) {\r\n    const {setSearch, searchValue} = props;\r\n    return (\r\n        <input\r\n            className='pa3 ba b--green bg-lightest-blue ma2'\r\n            type='search'\r\n            placeholder='Search a friend'\r\n            value={searchValue}\r\n            onChange = {(event)=>setSearch(event.target.value)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nimport styles from './Scroll.module.scss';\r\n\r\nfunction Scroll(props: any) {\r\n    return (\r\n        <div style={{ height: '75vh' }} className={styles.scroll}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component<{}, any> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Oops, something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\n\nimport styles from './App.module.scss';\n\nimport CardsList from '../components/CardsList/CardsList';\nimport SearchBox from '../components/SearchBox/SearchBox';\nimport Scroll from '../components/Scroll/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary/ErrorBoundary';\n\nfunction App() {\n  const [robotsData, setRobotsData]: any = useState([]);\n  const [searchField, setSearchField]: any = useState('');\n  useEffect(() => {\n    const url = 'https://jsonplaceholder.typicode.com/users';\n    fetch(url)\n      .then(response => response.json())\n      .then(data => setRobotsData(data));\n  }, []);\n  const filtredRobots = robotsData.filter((robot: any) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className={styles.app}>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchBox setSearch={setSearchField} searchValue={searchField} />\n      <Scroll>\n        <ErrorBoundary>\n          {!robotsData.length\n            ? <div className={styles.loader} />\n            : <CardsList robots={filtredRobots} />}\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}